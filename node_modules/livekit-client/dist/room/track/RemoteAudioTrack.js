"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stats_1 = require("../stats");
const RemoteTrack_1 = __importDefault(require("./RemoteTrack"));
const Track_1 = require("./Track");
class RemoteAudioTrack extends RemoteTrack_1.default {
    constructor(mediaTrack, sid, receiver) {
        super(mediaTrack, sid, Track_1.Track.Kind.Audio, receiver);
        this.monitorReceiver = () => __awaiter(this, void 0, void 0, function* () {
            if (!this.receiver) {
                this._currentBitrate = 0;
                return;
            }
            const stats = yield this.getReceiverStats();
            if (stats && this.prevStats && this.receiver) {
                this._currentBitrate = stats_1.computeBitrate(stats, this.prevStats);
            }
            this.prevStats = stats;
            setTimeout(() => {
                this.monitorReceiver();
            }, stats_1.monitorFrequency);
        });
    }
    getReceiverStats() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.receiver) {
                return;
            }
            const stats = yield this.receiver.getStats();
            let receiverStats;
            stats.forEach((v) => {
                if (v.type === 'inbound-rtp') {
                    receiverStats = {
                        type: 'audio',
                        timestamp: v.timestamp,
                        jitter: v.jitter,
                        bytesReceived: v.bytesReceived,
                        concealedSamples: v.concealedSamples,
                        concealmentEvents: v.concealmentEvents,
                        silentConcealedSamples: v.silentConcealedSamples,
                        silentConcealmentEvents: v.silentConcealmentEvents,
                        totalAudioEnergy: v.totalAudioEnergy,
                        totalSamplesDuration: v.totalSamplesDuration,
                    };
                }
            });
            return receiverStats;
        });
    }
}
exports.default = RemoteAudioTrack;
//# sourceMappingURL=RemoteAudioTrack.js.map